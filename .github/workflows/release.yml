name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

# Add permissions for creating releases
permissions:
  contents: write
  pull-requests: read

jobs:
  build-and-release:
    name: Build and Release - ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows"
            os: windows-2022
            target: "win"
            arch: "x64"
          - name: "Ubuntu"
            os: ubuntu-22.04
            target: "linux"
            arch: "x64"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack for Yarn
        run: corepack enable

      - name: Cache node-llama-cpp binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/node-llama-cpp
            ~/AppData/Local/node-llama-cpp
            ~/Library/Caches/node-llama-cpp
          key: ${{ runner.os }}-${{ runner.arch }}-node-llama-cpp-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-node-llama-cpp-

      - name: Install dependencies on Ubuntu
        if: matrix.config.name == 'Ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            g++ \
            cmake \
            make \
            python3 \
            python3-pip \
            pkg-config \
            libarchive-tools \
            rpm
          sudo snap install snapcraft --classic
          gcc --version
          g++ --version
          cmake --version
          python3 --version

      - name: Install dependencies on Windows
        if: matrix.config.name == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install python3 -y
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.CMake.Project --add Microsoft.VisualStudio.Component.VC.ATL --add Microsoft.VisualStudio.Component.VC.ATLMFC --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.VC.CoreBuildTools" -y
          cmake --version
          python --version
          echo "CMAKE_GENERATOR=Visual Studio 17 2022" >> $env:GITHUB_ENV
          echo "CMAKE_GENERATOR_PLATFORM=x64" >> $env:GITHUB_ENV

      - name: Install modules
        run: yarn install --frozen-lockfile
        env:
          SKIP_MODEL_DOWNLOAD: "true"
          npm_config_build_from_source: "true"
          npm_config_msvs_version: "2022"
          npm_config_target_arch: "x64"
          NODE_LLAMA_CPP_CMAKE_OPTION_GGML_NATIVE: "OFF"
          NODE_LLAMA_CPP_CMAKE_OPTION_GGML_STATIC: "ON"
          NODE_LLAMA_CPP_CMAKE_OPTION_GGML_LTO: "ON"

      - name: Build electron app for Windows
        if: matrix.config.name == 'Windows'
        shell: bash
        timeout-minutes: 480
        run: yarn run build:win-zip
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          npm_config_target_arch: "x64"
          npm_config_target_platform: "win32"

      - name: Build electron app for Linux
        if: matrix.config.name == 'Ubuntu'
        shell: bash
        timeout-minutes: 480
        run: yarn run build:linux-tar
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload Windows artifacts
        if: matrix.config.name == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: "akbuzat-windows-x64"
          path: "./release/win-unpacked/"

      - name: Upload Linux artifacts
        if: matrix.config.name == 'Ubuntu'
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: "akbuzat-linux-x64-tar-gz"
          path: "./release/*.tar.gz"

  create-manual-release:
    name: Create Manual Release
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Generate release date
        id: date
        run: |
          # Generate formatted date for release body
          RELEASE_DATE=$(date +'%Y-%m-%d %H:%M:%S UTC')
          echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "Generated date: $RELEASE_DATE"
      
      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          
          # Archive Windows artifacts
          if [ -d "./artifacts/akbuzat-windows-x64" ]; then
            cd "./artifacts/akbuzat-windows-x64"
            zip -r "../../release-assets/akbuzat-${{ inputs.version }}-windows-x64.zip" .
            cd ../..
          fi
          
          # Rename Linux tar.gz with version
          if [ -f "./artifacts/akbuzat-linux-x64-tar-gz"/*.tar.gz ]; then
            for file in "./artifacts/akbuzat-linux-x64-tar-gz"/*.tar.gz; do
              filename=$(basename "$file")
              extension="${filename##*.}"
              name="${filename%.*}"
              cp "$file" "./release-assets/akbuzat-${{ inputs.version }}-linux-x64.tar.gz"
            done
          fi
          
          ls -la ./release-assets/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: "Release ${{ inputs.version }}"
          body: |
            üéâ **Manual release ${{ inputs.version }}**
            
            üìÖ Created: ${{ steps.date.outputs.date }}
            üìù Commit: ${{ github.sha }}
            
            ## Download:
            - **Windows x64**: `akbuzat-${{ inputs.version }}-windows-x64.zip`
            - **Linux x64**: `akbuzat-${{ inputs.version }}-linux-x64.tar.gz`
            
            ## Notes:
            This release was created manually from commit ${{ github.sha }}.
          files: ./release-assets/*
          draft: false
          prerelease: ${{ inputs.prerelease }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 